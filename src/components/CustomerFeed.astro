---
// customerFeed.astro
const testimonials = [
  {
    name: "Paul K. Selden",
    position: "Dignissim",
    rating: 4,
    comment: "Tellus ultrices egestas justo duis. Leo sit quam ultrices turpis libero facilisis faucibus. Nulla elementum sed senectus nunc dolor augue.",
    imageSrc: "/pasta.png"
  }
];
---

<section class="customerFeed bg-gray-100 py-16 px-4 md:px-8 lg:px-24">
  <!-- Header -->
  <div class="text-center max-w-3xl mx-auto mb-12">
    <h2 class="text-4xl md:text-5xl font-bold mb-4">
      Our Customer <span class="text-red-600">Feedbacks</span>
    </h2>
    <p class="text-gray-600 mb-8">
      Magna sed sagittis non in mattis ultrices fermentum neque maecenas.
    </p>
    <button
      id="toggleForm"
      class="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg transition-colors"
    >
      Write a Feedback
    </button>
  </div>

  <!-- Feedback Form -->
  <div id="feedbackForm" class="hidden max-w-2xl mx-auto mb-12">
    <div class="bg-white rounded-xl p-8 shadow-lg">
      <form id="testimonialForm" class="space-y-6">
        <!-- Star Rating -->
        <div class="flex justify-center space-x-2 mb-4">
          {[1, 2, 3, 4, 5].map((star) => (
            <button
              type="button"
              class="star-btn text-gray-300 hover:text-yellow-400 focus:outline-none"
              data-rating={star}
            >
              <i class="fa-solid fa-star text-lg"></i>
            </button>
          ))}
        </div>
        
        <!-- Form Fields -->
        <div class="space-y-4">
          <input
            type="text"
            name="name"
            placeholder="Your Name"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-600 focus:border-transparent"
          />
          
          <input
            type="text"
            name="position"
            placeholder="Your Position"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-600 focus:border-transparent"
          />
          
          <textarea
            name="comment"
            placeholder="Your Feedback"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-600 focus:border-transparent min-h-[100px]"
          ></textarea>
        </div>

        <button
          type="submit"
          class="w-full bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg transition-colors"
        >
          Submit Feedback
        </button>
      </form>
    </div>
  </div>

  <!-- Success Message -->
  <div
    id="successMessage"
    class="hidden max-w-2xl mx-auto mb-8 bg-green-50 text-green-800 border border-green-200 rounded-lg p-4"
  >
    Thank you for your feedback! It has been added successfully.
  </div>

  <!-- Testimonials Grid -->
  <div id="testimonialsGrid" class="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto">
    {testimonials.map((testimonial) => (
      <div class="bg-white rounded-xl p-8 shadow-lg">
        <!-- Rating Stars -->
        <div class="flex gap-1 mb-4">
          {[...Array(5)].map((_, index) => (
            <i class={`fa-solid fa-star text-sm ${
              index < testimonial.rating ? 'text-yellow-400' : 'text-gray-200'
            }`}></i>
          ))}
        </div>
        <!-- Testimonial Text -->
        <p class="text-gray-600 mb-6 leading-relaxed">
          {testimonial.comment}
        </p>
        <!-- Customer Info -->
        <div class="flex justify-between items-center">
          <div>
            <h3 class="font-bold text-lg text-gray-800">{testimonial.name}</h3>
            <p class="text-gray-500">{testimonial.position}</p>
          </div>
          <div class="w-20 h-20 overflow-hidden rounded-full">
            <img 
              src={testimonial.imageSrc} 
              alt={testimonial.name}
              class="w-full h-full object-cover"
            />
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

<script>
  let currentRating = 0;

  // Toggle form visibility
  const toggleButton = document.getElementById('toggleForm');
  const feedbackForm = document.getElementById('feedbackForm');
  
  toggleButton?.addEventListener('click', () => {
    feedbackForm?.classList.toggle('hidden');
    toggleButton.textContent = feedbackForm?.classList.contains('hidden') 
      ? 'Write a Feedback' 
      : 'Close Form';
  });

  // Handle star rating
  const starButtons = document.querySelectorAll('.star-btn');
  starButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      const rating = parseInt((e.currentTarget as HTMLElement).dataset.rating || '0');
      currentRating = rating;
      
      // Update star colors
      starButtons.forEach((btn, index) => {
        const star = btn.querySelector('i');
        if (star) {
          star.className = `fa-solid fa-star text-lg ${
            index < rating ? 'text-yellow-400' : 'text-gray-300'
          }`;
        }
      });
    });
  });

  // Handle form submission
  const testimonialForm = document.getElementById('testimonialForm');
  const successMessage = document.getElementById('successMessage');
  const testimonialsGrid = document.getElementById('testimonialsGrid');

  testimonialForm?.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const newTestimonial = {
      name: formData.get('name'),
      position: formData.get('position'),
      comment: formData.get('comment'),
      rating: currentRating,
      imageSrc: "/public/pasta.png" // Replace with actual image handling
    };

    // Add new testimonial to grid
    const testimonialElement = createTestimonialElement(newTestimonial);
    testimonialsGrid?.insertAdjacentHTML('afterbegin', testimonialElement);

    // Show success message
    if (successMessage && feedbackForm) {
      successMessage.classList.remove('hidden');
      feedbackForm.classList.add('hidden');
      toggleButton!.textContent = 'Write a Feedback';
      
      // Reset form
      (e.target as HTMLFormElement).reset();
      currentRating = 0;
      starButtons.forEach(btn => {
        const star = btn.querySelector('i');
        if (star) {
          star.className = 'fa-solid fa-star text-lg text-gray-300';
        }
      });

      // Hide success message after 3 seconds
      setTimeout(() => {
        successMessage.classList.add('hidden');
      }, 3000);
    }
  });

  // Helper function to create testimonial HTML
  function createTestimonialElement(testimonial: any) {
    return `
      <div class="bg-white rounded-xl p-8 shadow-lg">
        <div class="flex gap-1 mb-4">
          ${[...Array(5)].map((_, index) => `
            <i class="fa-solid fa-star text-sm ${
              index < testimonial.rating ? 'text-yellow-400' : 'text-gray-200'
            }"></i>
          `).join('')}
        </div>
        <p class="text-gray-600 mb-6 leading-relaxed">
          ${testimonial.comment}
        </p>
        <div class="flex justify-between items-center">
          <div>
            <h3 class="font-bold text-lg text-gray-800">${testimonial.name}</h3>
            <p class="text-gray-500">${testimonial.position}</p>
          </div>
          <div class="w-20 h-20 overflow-hidden rounded-full">
            <img 
              src="${testimonial.imageSrc}"
              alt="${testimonial.name}"
              class="w-full h-full object-cover"
            />
          </div>
        </div>
      </div>
    `;
  }
</script>